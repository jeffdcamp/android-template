buildscript {
    ext.kotlinVersion = '1.2.41'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        google()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:3.2.0-alpha14"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0' // version plugin support
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
//        classpath 'com.google.gms:oss-licenses:0.9.1'
    }
}

apply plugin: 'com.android.application'
//apply plugin: 'com.google.gms.oss.licenses.plugin' // removed because this now shows more than run-time libraries and potentially has compile issue between 0.9.1 and 0.9.2
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.github.ben-manes.versions' // ./gradlew dependencyUpdates -Drevision=release

// Manifest version information
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0
def versionMajorMinorPatchBuild = "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
def buildTime = new Date().getTime()

// work-around for Kotlin compile crash issue with 1.2.40 and 1.2.41 (https://youtrack.jetbrains.com/oauth?state=%2Fissue%2FKT-23902)
configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.name == 'kotlin-compiler-embeddable') {
                details.useVersion "1.2.30"
            }
        }
    }
}


repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    google()
}

ext {
    // versions for libraries that multiple dependencies
    supportLibVersion = '27.1.1'
    archLifecycleVersion = '1.1.1'
    archRoomVersion = '1.1.0'
    playServicesVersion = '15.0.2'
    daggerVersion = '2.16'
    okhttpVersion = '3.10.0'
    dbtoolsRoomVersion = '2.0.0'
}

dependencies {
    // Android
    implementation "com.android.support:appcompat-v7:${supportLibVersion}"
    implementation "com.android.support:recyclerview-v7:${supportLibVersion}"
    implementation "com.android.support:preference-v14:${supportLibVersion}"
    implementation "com.android.support:design:${supportLibVersion}"
    implementation "com.android.support:support-annotations:${supportLibVersion}" // includes support-v4
    implementation "com.android.support:support-v13:${supportLibVersion}" // needed by material dialogs (depending on older version)
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'com.android.support:multidex-instrumentation:1.0.3'
    implementation "com.google.android.gms:play-services-analytics:${playServicesVersion}"
//    implementation "com.google.android.gms:play-services-oss-licenses:${playServicesVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'

    // Code
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:0.22.5"
    implementation 'me.eugeniomarletti:android-extras-delegates:1.0.5'
    implementation 'com.jakewharton.threetenabp:threetenabp:1.1.0'
    implementation 'com.evernote:android-job:1.2.5'
    implementation 'com.jakewharton.timber:timber:4.7.0'

    // UI
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    // Android Architecture Components
    implementation "android.arch.lifecycle:extensions:$archLifecycleVersion"
    implementation "android.arch.lifecycle:runtime:$archLifecycleVersion"
    kapt "android.arch.lifecycle:compiler:$archLifecycleVersion"

    // Database
    implementation "android.arch.persistence.room:runtime:$archRoomVersion"
    kapt "android.arch.persistence.room:compiler:$archRoomVersion"

    // Network
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    // JSON Parsing
    implementation "com.google.code.gson:gson:2.8.4"
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'

    // Dagger 2
    implementation "com.google.dagger:dagger:${daggerVersion}"
    kapt "com.google.dagger:dagger-compiler:${daggerVersion}"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.7.1'

    // Custom SQLite database

    // (for use of SqliteOrgSQLiteOpenHelperFactory in AppModule.kt)
//    implementation "org.dbtools:dbtools-room:$dbtoolsRoomVersion"
//    implementation "org.dbtools:dbtools-room-sqliteorg:$dbtoolsRoomVersion"

//    implementation 'org.sqlite.sqliteX:sqlite-android:3.15.2'

//    implementation 'org.sqlite:sqlite-android:3.8.9.0-20150415'
//    implementation 'net.sqlcipher:sqlcipher-aar:3.1.0.20140823'

    // Test (Integration)
    // Espresso core dependencies
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation "com.android.support:support-annotations:${supportLibVersion}" // fix dependency conflict warning

    // Espresso contrib dependencies
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation "com.android.support:appcompat-v7:${supportLibVersion}"
    androidTestImplementation "com.android.support:recyclerview-v7:${supportLibVersion}"
    androidTestImplementation "com.android.support:design:${supportLibVersion}"

    // Test (Unit)
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.18.3' // be sure to add src/test/resources/mockito-extensions (so you don't have to 'open' all of your classes)
    testImplementation 'org.threeten:threetenbp:1.3.6'
    testImplementation 'org.xerial:sqlite-jdbc:3.21.0.1'
    kaptTest "com.google.dagger:dagger-compiler:${daggerVersion}"
}

// todo JetBrains has indicated that coroutines are stable, but the kotlinx-coroutines designs may change ... remove this when kotlinx-coroutines are no longer experimental
kotlin {
    experimental {
        coroutines 'enable' // temp disable warnings
    }
}

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 27

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName versionMajorMinorPatchBuild
        buildConfigField "String", "USER_AGENT_APP_NAME", "\"AndroidTemplate\""
        buildConfigField "String", "ANALYTICS_KEY", "\"${getAnalyticsKey()}\""

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        // used by Room, to test migrations
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schema".toString()]
            }
        }

        // Espresso
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
    }

    lintOptions {
        abortOnError true
        disable 'InvalidPackage'

        // temp disable Timber (lint checks are not compatible with 3.1.x Gradle plugin)
        //disable "BinaryOperationInTimber", "LogNotTimber", "StringFormatInTimber", "ThrowableNotAtBeginning", "TimberArgCount", "TimberArgTypes", "TimberExceptionLogging", "TimberTagLength"
    }

    // set dummy signing values if not defined in ~/.gradle/gradle.properties
    if (!project.hasProperty('myKeystore')) {
        println "Using dummy signing values"
        project.ext.setProperty('myKeystore', 'dummy')
        project.ext.setProperty('myKeystorePassword', 'dummy')
        project.ext.setProperty('myKeyAlias', 'dummy')
        project.ext.setProperty('myKeyPassword', 'dummy')
    }

    // defined values my* in ~/.gradle/gradle.properties
    signingConfigs {
        prodConfig {
            storeFile file(myKeystore)
            storePassword myKeystorePassword
            keyAlias myKeyAlias
            keyPassword myKeyPassword
        }
    }

    buildTypes {
        debug {
            versionNameSuffix '-DEV'
            applicationIdSuffix '.dev'
            buildConfigField "long", "BUILD_TIME", "0l" // to improve build times, do allow change on every build
        }
        alpha {
            initWith(buildTypes.release)
            versionNameSuffix '-ALPHA'
            applicationIdSuffix '.dev'
            buildConfigField "long", "BUILD_TIME", "${buildTime}l"
            debuggable true
            signingConfig signingConfigs.prodConfig
        }
        beta {
            initWith(buildTypes.release)
            versionNameSuffix '-BETA'
            buildConfigField "long", "BUILD_TIME", "${buildTime}l"
            signingConfig signingConfigs.prodConfig
        }
        release {
            buildConfigField "long", "BUILD_TIME", "${buildTime}l"
            versionNameSuffix ''
            minifyEnabled true
            shrinkResources true
            signingConfig signingConfigs.prodConfig
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString()) // Room schemas
    }
}

// ===== TEST TASKS =====

// show JUnit failure reason in console (the following may fail tests run from IDE)
tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
    }
}

// Rename and place "myAnalyticsKey" in global gradle.properties
def getAnalyticsKey() {
    return hasProperty('myAnalyticsKey') ? myAnalyticsKey : ''
}
